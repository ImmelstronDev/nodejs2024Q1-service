# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
version: '3'
networks:
  default:
    driver: bridge
    ipam: 
      driver: default
      config:
        - subnet: ${SUBNET}
          gateway: ${GATEWAY}

services:
  node:
    container_name: node
    restart: always
    build:
      context: .
    volumes:
      - ./src:/usr/app/src
      - /usr/app/node_modules
    environment:
      PORT: ${PORT}
      DATABASE_URL: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:${POSTGRES_PORT}/${POSTGRES_DB}?schema=public"
    ports:
      - ${PORT}:${PORT}
    depends_on:
      - postgres
    networks:
      - default

  postgres:
    container_name: postgres
    restart: always
    build:
      context: ./postgres-db
      dockerfile: Dockerfile
    volumes:
      - pgdata:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
    ports:
      - ${POSTGRES_PORT}:${POSTGRES_PORT}
    networks:
      - default
  
volumes:
  pgdata:


# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker-compose up`.


