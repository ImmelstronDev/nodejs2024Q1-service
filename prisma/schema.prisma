// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  login     String
  password  String
  version   Int      @default(1)
  createdAt DateTime @default(now()) @map("created_at")
  updateAt  DateTime @updatedAt @map("updated_at")

  @@map("users")
}

model Track {
  id              String            @id @default(uuid())
  name            String
  artistId        String?           @map("artist_id")
  albumId         String?           @map("album_id")
  duration        Int
  artist          Artist?           @relation(fields: [artistId], references: [id], onDelete: SetNull)
  album           Album?            @relation(fields: [albumId], references: [id], onDelete: SetNull)
  favorites TrackToFavorite[]

  @@map("tracks")
}

model Artist {
  id               String             @id @default(uuid())
  name             String
  grammy           Boolean            @default(false)
  albums           Album[]
  tracks           Track[]
  favorites ArtistToFavorite[]

  @@map("artists")
}

model Album {
  id              String            @id @default(uuid())
  name            String
  year            Int
  artistId        String?           @map("artist_id")
  tracks          Track[]
  artist          Artist?           @relation(fields: [artistId], references: [id], onDelete: SetNull)
  favorites AlbumToFavorite[]
}

model Favorites {
  id      Int                @id @default(1234)
  tracks  TrackToFavorite[]
  artists ArtistToFavorite[]
  albums  AlbumToFavorite[]

  @@map("favorites")
}

model TrackToFavorite {
  trackId     String     @id @map("track_id")
  track       Track      @relation(fields: [trackId], references: [id], onDelete: Cascade)
  favoritesId Int?
  favorites   Favorites? @relation(fields: [favoritesId], references: [id])

  @@map("track_to_favorites")
}

model ArtistToFavorite {
  artistId    String    @id @map("artist_id")
  artist      Artist    @relation(fields: [artistId], references: [id], onDelete: Cascade)
  favoritesId Int
  favorites   Favorites @relation(fields: [favoritesId], references: [id])

  @@map("artist_to_favorites")
}

model AlbumToFavorite {
  albumId     String    @id @map("album_id")
  album       Album     @relation(fields: [albumId], references: [id], onDelete: Cascade)
  favoritesId Int
  favorites   Favorites @relation(fields: [favoritesId], references: [id])

  @@map("album_to_favorites")
}
